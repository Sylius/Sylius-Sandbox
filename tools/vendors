#!/usr/bin/env php

<?php

/*
 * This file is part of the Sylius sandbox application and is based
 * on the Symfony vendors script.
 *
 * (c) Fabien Potencier
 * (c) Paweł Jędrzejewski
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

$rootDir = dirname(__DIR__);
$vendorDir = $rootDir.'/vendor';

array_shift($argv);

if (!isset($argv[0])) {
    exit(<<<EOF
Symfony2 vendors script management modified by Sylius.

Specify a command to run...

 install - Install vendors as specified in deps files. ( Recommended command... )
 update -  Update vendors to their latest versions.


EOF
    );
}

if (!in_array($command = array_shift($argv), array('install', 'update'))) {
    exit(sprintf("Command \"%s\" does not exist.\n", $command));
}

if (!is_dir($vendorDir)) {
    mkdir($vendorDir, 0777, true);
}

$versions = array();
if ('install' === $command && file_exists($rootDir.'/deps/current')) {
    foreach (file($rootDir.'/deps/current', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        $parts = array_values(array_filter(explode(' ', $line)));
        if (2 !== count($parts)) {
            exit(sprintf('The deps version file is not valid. Near "%s"...', $line));
        }
        $versions[$parts[0]] = $parts[1];
    }
}

$newversions = array();
$deps = parse_ini_file($rootDir.'/deps/base', true, INI_SCANNER_RAW);
if (false === $deps) {
    exit("The deps file is not valid ini syntax. Perhaps missing a trailing newline?\n");
}
foreach ($deps as $name => $dep) {
    $dep = array_map('trim', $dep);

    // revision
    if (isset($versions[$name])) {
        $rev = $versions[$name];
    } else {
        $rev = isset($dep['version']) ? $dep['version'] : 'origin/HEAD';
    }

    // install dir
    $installDir = isset($dep['target']) ? $vendorDir.'/'.$dep['target'] : $vendorDir.'/'.$name;
    if (in_array('--reinstall', $argv)) {
        if (PHP_OS == 'WINNT') {
            system(sprintf('rmdir /S /Q %s', escapeshellarg(realpath($installDir))));
        } else {
            system(sprintf('rm -rf %s', escapeshellarg($installDir)));
        }
    }

    echo "Installing or updating $name... \n";

    // url
    if (!isset($dep['git'])) {
        exit(sprintf('The "git" value for the "%s" dependency must be set.', $name));
    }
    $url = $dep['git'];

    if (!is_dir($installDir)) {
        system(sprintf('git clone %s %s', escapeshellarg($url), escapeshellarg($installDir)));
    }

    system(sprintf('cd %s && git fetch origin && git reset --hard %s', escapeshellarg($installDir), escapeshellarg($rev)));

    if ('update' === $command) {
        ob_start();
        system(sprintf('cd %s && git log -n 1 --format=%%H', escapeshellarg($installDir)));
        $newversions[] = trim($name.' '.ob_get_clean());
    }
}

if ('update' === $command) {
    file_put_contents($rootDir.'/deps/current', implode("\n", $newversions));
}

$interpreter = PHP_OS == 'WINNT' ? 'php.exe' : '';

system(sprintf('%s %s %s', $interpreter, escapeshellarg($rootDir.'/tools/bootstrap'), escapeshellarg($rootDir)));
system(sprintf('%s %s assets:install %s', $interpreter, escapeshellarg($rootDir.'/app/tools/console'), escapeshellarg($rootDir.'/public')));
system(sprintf('%s %s cache:clear --no-warmup', $interpreter, escapeshellarg($rootDir.'/app/tools/console')));
